from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
import uvicorn
from fastapi.responses import FileResponse
from reportlab.lib.pagesizes import A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
import os

# Cr√©ation de l'application FastAPI
app = FastAPI(
    title="API CV Generator (Version Simple avec PDF)",
    description="API pour g√©n√©rer des CV et lettres de motivation avec PDF",
    version="1.0.0"
)

# Mod√®le Pydantic pour valider les donn√©es
class CVRequest(BaseModel):
    nom: str
    prenom: str
    email: str
    poste_vise: str
    experience: str

# Mod√®le de r√©ponse
class CVResponse(BaseModel):
    status: str
    lettre: str

def generate_letter_simple(data: CVRequest) -> str:
    """
    G√©n√®re une lettre de motivation simple (sans IA pour les tests)
    """
    prompt = f"G√©n√®re une lettre de motivation pour un poste de {data.poste_vise}. Nom : {data.nom} {data.prenom}. Email : {data.email}. Exp√©rience : {data.experience}"
    
    # Lettre de motivation g√©n√©rique bas√©e sur les donn√©es
    lettre = f"""
Madame, Monsieur,

Je me permets de vous pr√©senter ma candidature pour le poste de {data.poste_vise} au sein de votre entreprise.

Mon nom est {data.nom} {data.prenom} et je dispose de {data.experience}. Cette exp√©rience m'a permis de d√©velopper des comp√©tences solides dans mon domaine d'expertise.

Je suis particuli√®rement int√©ress√©(e) par cette opportunit√© car elle correspond parfaitement √† mes aspirations professionnelles et √† mes comp√©tences.

Vous pouvez me contacter √† l'adresse suivante : {data.email}

Je reste √† votre disposition pour un entretien et vous remercie de l'attention que vous porterez √† ma candidature.

Cordialement,
{data.nom} {data.prenom}
"""
    
    return lettre.strip()

def create_pdf(letter_text: str) -> str:
    """
    Cr√©e un fichier PDF √† partir du texte de la lettre avec ReportLab
    """
    try:
        print("üîÑ Cr√©ation du fichier PDF...")
        
        # Cr√©ation du fichier PDF
        pdf_path = "lettre_motivation.pdf"
        doc = SimpleDocTemplate(pdf_path, pagesize=A4)
        styles = getSampleStyleSheet()
        
        # Styles personnalis√©s
        title_style = ParagraphStyle(
            'CustomTitle',
            parent=styles['Heading1'],
            fontSize=16,
            spaceAfter=30,
            alignment=1  # Centr√©
        )
        
        normal_style = ParagraphStyle(
            'CustomNormal',
            parent=styles['Normal'],
            fontSize=12,
            spaceAfter=12,
            leading=16
        )
        
        # Contenu du PDF
        story = []
        
        # Titre
        story.append(Paragraph("Lettre de Motivation", title_style))
        story.append(Spacer(1, 20))
        
        # Contenu de la lettre
        paragraphs = letter_text.strip().split('\n\n')
        for paragraph in paragraphs:
            if paragraph.strip():
                story.append(Paragraph(paragraph.strip(), normal_style))
                story.append(Spacer(1, 12))
        
        # Signature
        story.append(Spacer(1, 30))
        signature_style = ParagraphStyle(
            'Signature',
            parent=styles['Normal'],
            fontSize=12,
            alignment=2  # Align√© √† droite
        )
        story.append(Paragraph("Signature", signature_style))
        
        # G√©n√©ration du PDF
        doc.build(story)
        
        print(f"‚úÖ PDF cr√©√© avec succ√®s: {pdf_path}")
        return pdf_path
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation du PDF: {e}")
        return None

@app.get("/")
async def root():
    """Endpoint racine pour tester l'API"""
    return {"message": "API CV Generator - Utilisez POST /generate"}

@app.post("/generate")
async def generate_cv(request: CVRequest):
    """
    Endpoint pour g√©n√©rer un CV, une lettre de motivation et un PDF
    """
    try:
        # Affichage des informations dans la console
        print("=== INFORMATIONS CV RECUES ===")
        print(f"Nom: {request.nom}")
        print(f"Pr√©nom: {request.prenom}")
        print(f"Email: {request.email}")
        print(f"Poste vis√©: {request.poste_vise}")
        print(f"Exp√©rience: {request.experience}")
        print("==============================")
        
        # G√©n√©ration de la lettre
        lettre = generate_letter_simple(request)
        
        # Cr√©ation du PDF
        pdf_path = create_pdf(lettre)
        
        if pdf_path and os.path.exists(pdf_path):
            # Retourner le fichier PDF
            return FileResponse(
                path=pdf_path,
                filename="lettre_motivation.pdf",
                media_type="application/pdf"
            )
        else:
            # Fallback: retourner la r√©ponse JSON si le PDF n'a pas pu √™tre cr√©√©
            return CVResponse(status="OK", lettre=lettre)
        
    except Exception as e:
        print(f"Erreur lors du traitement: {e}")
        raise HTTPException(status_code=500, detail="Erreur interne du serveur")

if __name__ == "__main__":
    # Lancement du serveur avec uvicorn
    uvicorn.run(
        "main_simple_pdf:app",
        host="0.0.0.0",
        port=8002,  # Port diff√©rent pour √©viter les conflits
        reload=True,
        log_level="info"
    ) 