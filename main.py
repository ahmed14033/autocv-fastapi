from fastapi import FastAPI, HTTPException
from pydantic import BaseModel, EmailStr
from typing import Optional
import uvicorn
from transformers import pipeline
import torch
from fastapi.responses import FileResponse
from reportlab.lib.pagesizes import A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
import os

# Cr√©ation de l'application FastAPI
app = FastAPI(
    title="API CV Generator",
    description="API pour g√©n√©rer des CV et lettres de motivation",
    version="1.0.0"
)

# Mod√®le Pydantic pour valider les donn√©es
class CVRequest(BaseModel):
    nom: str
    prenom: str
    email: str
    poste_vise: str
    experience: str

# Mod√®le de r√©ponse
class CVResponse(BaseModel):
    status: str
    lettre: str

# Variable globale pour le pipeline
text_generator = None

def initialize_model():
    """Initialise le mod√®le HuggingFace"""
    global text_generator
    try:
        print("üîÑ Initialisation du mod√®le HuggingFace...")
        text_generator = pipeline(
            "text-generation",
            model="tiiuae/falcon-7b-instruct",
            torch_dtype=torch.bfloat16,
            device_map="auto",
            max_length=512,
            do_sample=True,
            temperature=0.7,
            top_p=0.9
        )
        print("‚úÖ Mod√®le initialis√© avec succ√®s!")
    except Exception as e:
        print(f"‚ùå Erreur lors de l'initialisation du mod√®le: {e}")
        print("‚ö†Ô∏è Utilisation d'un mod√®le de fallback...")
        try:
            text_generator = pipeline(
                "text-generation",
                model="gpt2",
                max_length=200,
                do_sample=True,
                temperature=0.8
            )
            print("‚úÖ Mod√®le de fallback initialis√©!")
        except Exception as e2:
            print(f"‚ùå Erreur avec le mod√®le de fallback: {e2}")
            text_generator = None

def generate_letter(data: CVRequest) -> str:
    """
    G√©n√®re une lettre de motivation en utilisant le mod√®le HuggingFace
    """
    if text_generator is None:
        return "Erreur: Mod√®le non disponible. Veuillez r√©essayer plus tard."
    
    try:
        # Formation du prompt
        prompt = f"G√©n√®re une lettre de motivation pour un poste de {data.poste_vise}. Nom : {data.nom} {data.prenom}. Email : {data.email}. Exp√©rience : {data.experience}"
        
        print(f"üîÑ G√©n√©ration de la lettre avec le prompt: {prompt[:100]}...")
        
        # G√©n√©ration du texte
        result = text_generator(prompt, max_length=512, do_sample=True, temperature=0.7)
        
        # Extraction du texte g√©n√©r√©
        generated_text = result[0]['generated_text']
        
        # Nettoyage du texte (suppression du prompt original)
        if generated_text.startswith(prompt):
            generated_text = generated_text[len(prompt):].strip()
        
        print(f"‚úÖ Lettre g√©n√©r√©e avec succ√®s! Longueur: {len(generated_text)} caract√®res")
        return generated_text
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la g√©n√©ration: {e}")
        return f"Erreur lors de la g√©n√©ration de la lettre: {str(e)}"

def create_pdf(letter_text: str) -> str:
    """
    Cr√©e un fichier PDF √† partir du texte de la lettre avec ReportLab
    """
    try:
        print("üîÑ Cr√©ation du fichier PDF...")
        
        # Cr√©ation du fichier PDF
        pdf_path = "lettre_motivation.pdf"
        doc = SimpleDocTemplate(pdf_path, pagesize=A4)
        styles = getSampleStyleSheet()
        
        # Styles personnalis√©s
        title_style = ParagraphStyle(
            'CustomTitle',
            parent=styles['Heading1'],
            fontSize=16,
            spaceAfter=30,
            alignment=1  # Centr√©
        )
        
        normal_style = ParagraphStyle(
            'CustomNormal',
            parent=styles['Normal'],
            fontSize=12,
            spaceAfter=12,
            leading=16
        )
        
        # Contenu du PDF
        story = []
        
        # Titre
        story.append(Paragraph("Lettre de Motivation", title_style))
        story.append(Spacer(1, 20))
        
        # Contenu de la lettre
        paragraphs = letter_text.strip().split('\n\n')
        for paragraph in paragraphs:
            if paragraph.strip():
                story.append(Paragraph(paragraph.strip(), normal_style))
                story.append(Spacer(1, 12))
        
        # Signature
        story.append(Spacer(1, 30))
        signature_style = ParagraphStyle(
            'Signature',
            parent=styles['Normal'],
            fontSize=12,
            alignment=2  # Align√© √† droite
        )
        story.append(Paragraph("Signature", signature_style))
        
        # G√©n√©ration du PDF
        doc.build(story)
        
        print(f"‚úÖ PDF cr√©√© avec succ√®s: {pdf_path}")
        return pdf_path
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation du PDF: {e}")
        return None

@app.get("/")
async def root():
    """Endpoint racine pour tester l'API"""
    return {"message": "API CV Generator - Utilisez POST /generate"}

@app.post("/generate")
async def generate_cv(request: CVRequest):
    """
    Endpoint pour g√©n√©rer un CV, une lettre de motivation et un PDF
    Affiche les informations dans la console et retourne le fichier PDF
    """
    try:
        # Affichage des informations dans la console
        print("=== INFORMATIONS CV RECUES ===")
        print(f"Nom: {request.nom}")
        print(f"Pr√©nom: {request.prenom}")
        print(f"Email: {request.email}")
        print(f"Poste vis√©: {request.poste_vise}")
        print(f"Exp√©rience: {request.experience}")
        print("==============================")
        
        # G√©n√©ration de la lettre
        lettre = generate_letter(request)
        
        # Cr√©ation du PDF
        pdf_path = create_pdf(lettre)
        
        if pdf_path and os.path.exists(pdf_path):
            # Retourner le fichier PDF
            return FileResponse(
                path=pdf_path,
                filename="lettre_motivation.pdf",
                media_type="application/pdf"
            )
        else:
            # Fallback: retourner la r√©ponse JSON si le PDF n'a pas pu √™tre cr√©√©
            return CVResponse(status="OK", lettre=lettre)
        
    except Exception as e:
        print(f"Erreur lors du traitement: {e}")
        raise HTTPException(status_code=500, detail="Erreur interne du serveur")

@app.on_event("startup")
async def startup_event():
    """√âv√©nement de d√©marrage pour initialiser le mod√®le"""
    initialize_model()

if __name__ == "__main__":
    # Lancement du serveur avec uvicorn
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    )
